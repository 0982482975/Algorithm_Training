import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;


public class Main {
    static class InputReader {

        InputStream is = System.in;
        byte[] inbuf = new byte[1 << 25];
        int lenbuf = 0, ptrbuf = 0;

        public InputReader() throws IOException {
            lenbuf = is.read(inbuf);
        }

        public int readByte() {

            if (ptrbuf >= lenbuf) {
                return -1;
            }

            return inbuf[ptrbuf++];
        }

        public boolean hasNext() {
            int t = skip();

            if (t == -1) {
                return false;
            }
            ptrbuf--;
            return true;
        }

        public boolean isSpaceChar(int c) {
            return !(c >= 32 && c <= 126);
        }

        public int skip() {
            int b;
            while ((b = readByte()) != -1 && isSpaceChar(b))
                ;
            return b;
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public char nextChar() {
            return (char) skip();
        }

        public String next() {
            int b = skip();
            StringBuilder sb = new StringBuilder();
            while (!(isSpaceChar(b))) {
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public char[] ns(int n) {
            char[] buf = new char[n];
            int b = skip(), p = 0;
            while (p < n && !(isSpaceChar(b))) {
                buf[p++] = (char) b;
                b = readByte();
            }
            return n == p ? buf : Arrays.copyOf(buf, p);
        }

        public char[][] nm(int n, int m) {
            char[][] map = new char[n][];
            for (int i = 0; i < n; i++) {
                map[i] = ns(m);
            }
            return map;
        }

        public int[] na(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = nextInt();
            }
            return a;
        }

        public int nextInt() {
            int num = 0, b;
            boolean minus = false;
            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
                ;
            if (b == '-') {
                minus = true;
                b = readByte();
            }

            while (true) {
                if (b >= '0' && b <= '9') {
                    num = num * 10 + (b - '0');
                } else {
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public long nextLong() {
            long num = 0;
            int b;
            boolean minus = false;
            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
                ;
            if (b == '-') {
                minus = true;
                b = readByte();
            }

            while (true) {
                if (b >= '0' && b <= '9') {
                    num = num * 10 + (b - '0');
                } else {
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

    }

    static class Pos {
        int row, col;

        Pos(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }

    static String[][] map = {
            {"`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "="},
            {"Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]", "\\"},
            {"A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'", "~", "~"},
            {"Z", "X", "C", "V", "B", "N", "M", ",", ".", "/", "~", "~", "~"},
            {" ", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"}
    };
    static Map<String, Pos> hashMap = new HashMap<>();

    public static void main(String[] args) {
        InputReader inputReader = null;
        try {
            inputReader = new InputReader();
        } catch (IOException e) {
            e.printStackTrace();
        }
        //line 1
        hashMap.put("`", new Pos(0, 0));
        hashMap.put("1", new Pos(0, 1));
        hashMap.put("2", new Pos(0, 2));
        hashMap.put("3", new Pos(0, 3));
        hashMap.put("4", new Pos(0, 4));
        hashMap.put("5", new Pos(0, 5));
        hashMap.put("6", new Pos(0, 6));
        hashMap.put("7", new Pos(0, 7));
        hashMap.put("8", new Pos(0, 8));
        hashMap.put("9", new Pos(0, 9));
        hashMap.put("0", new Pos(0, 10));
        hashMap.put("-", new Pos(0, 11));
        hashMap.put("=", new Pos(0, 12));
        //line 2
        hashMap.put("Q", new Pos(1, 0));
        hashMap.put("W", new Pos(1, 1));
        hashMap.put("E", new Pos(1, 2));
        hashMap.put("R", new Pos(1, 3));
        hashMap.put("T", new Pos(1, 4));
        hashMap.put("Y", new Pos(1, 5));
        hashMap.put("U", new Pos(1, 6));
        hashMap.put("I", new Pos(1, 7));
        hashMap.put("O", new Pos(1, 8));
        hashMap.put("P", new Pos(1, 9));
        hashMap.put("[", new Pos(1, 10));
        hashMap.put("]", new Pos(1, 11));
        hashMap.put("\\", new Pos(1, 12));

        //line 3
        hashMap.put("A", new Pos(2, 0));
        hashMap.put("S", new Pos(2, 1));
        hashMap.put("D", new Pos(2, 2));
        hashMap.put("F", new Pos(2, 3));
        hashMap.put("G", new Pos(2, 4));
        hashMap.put("H", new Pos(2, 5));
        hashMap.put("J", new Pos(2, 6));
        hashMap.put("K", new Pos(2, 7));
        hashMap.put("L", new Pos(2, 8));
        hashMap.put(";", new Pos(2, 9));
        hashMap.put("'", new Pos(2, 10));
        //line 4
        hashMap.put("Z", new Pos(3, 0));
        hashMap.put("X", new Pos(3, 1));
        hashMap.put("C", new Pos(3, 2));
        hashMap.put("V", new Pos(3, 3));
        hashMap.put("B", new Pos(3, 4));
        hashMap.put("N", new Pos(3, 5));
        hashMap.put("M", new Pos(3, 6));
        hashMap.put(",", new Pos(3, 7));
        hashMap.put(".", new Pos(3, 8));
        hashMap.put("/", new Pos(3, 9));
        //line 5
        hashMap.put(" ", new Pos(4, 0));


        while (inputReader.hasNext()) {
            String str = inputReader.next();
            for (int i = 0; i < str.length(); i++) {
                Pos pos = hashMap.get(Character.toString(str.charAt(i)));
                System.out.print(pos.row != 4 ? map[pos.row][pos.col - 1] : map[pos.row][pos.col]);
            }
            System.out.println();

        }
    }
}
