import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {

        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));
        String str = ns();
        Character[] arrStr = new Character[str.length()];
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < str.length(); i++) {
            Character character = str.charAt(i);
            if (map.containsKey(str.charAt(i))) {
                map.replace(character, map.get(character) + 1);
            } else {
                map.put(character, 1);
            }
        }
        int bIdx = 0;
        int eIdx = str.length() - 1;
        boolean isExist = true;
        boolean isOdd = false;
        Iterator<Character> iterator = map.keySet().iterator();
        while (iterator.hasNext()) {
            Character e = iterator.next();
            int amoAppe = map.get(e);
            if (isOdd && amoAppe % 2 != 0) {
                isExist = false;
                break;
            }
            if (amoAppe % 2 != 0 && str.length() % 2 == 0) {
                isExist = false;
                break;
            }
            if (amoAppe % 2 != 0) {
                isOdd = true;
                arrStr[str.length() / 2] = e;
                amoAppe--;
            }
            int time = amoAppe / 2;
            while (time > 0) {
                arrStr[bIdx++] = e;
                arrStr[eIdx--] = e;
                time--;
            }

        }
        if (isExist) {
            for (int i = 0; i < str.length(); i++)
                bufferedWriter.write(arrStr[i]);
                bufferedWriter.write("\n");
        }else
            bufferedWriter.write("NO SOLUTION\n");
        bufferedWriter.flush();
        bufferedWriter.close();
    }

    static InputStream is = System.in;
    static byte[] inbuf = new byte[1 << 24];
    static int lenbuf = 0, ptrbuf = 0;

    static int readByte() {
        if (lenbuf == -1)
            throw new InputMismatchException();
        if (ptrbuf >= lenbuf) {
            ptrbuf = 0;
            try {
                lenbuf = is.read(inbuf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (lenbuf <= 0)
                return -1;
        }
        return inbuf[ptrbuf++];
    }

    static boolean isSpaceChar(int c) {
        return !(c >= 33 && c <= 126);
    }

    static int skip() {
        int b;
        while ((b = readByte()) != -1 && isSpaceChar(b))
            ;
        return b;
    }

    static double nd() {
        return Double.parseDouble(ns());
    }

    static char nc() {
        return (char) skip();
    }

    static String ns() {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while (!(isSpaceChar(b))) {
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }

    static char[] ns(int n) {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while (p < n && !(isSpaceChar(b))) {
            buf[p++] = (char) b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }

    static int ni() {
        int num = 0, b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }

    static long nl() {
        long num = 0;
        int b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }

}
