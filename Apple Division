
import java.io.*;
import java.util.*;

public class Main {
    static int[] mark;
    static int[] arr;
    static int k;
    static long sum=0;
    static long avg =0;
    static long sumTemp =0;
    static long minDiff= Long.MAX_VALUE;
    public static void main(String[] args) {
        arr = new int[ni()];
        for(int i=0; i<arr.length; i++) {
            arr[i] = ni();
            sum+=arr[i];
        }
        avg = sum/2;
        mark = new int[arr.length];
        for(int i =0; i<arr.length; i++) {
            k = i+1;
            attempt(0);
        }
        System.out.println(minDiff);

    }

    static void attempt(int i) {
        int previousDigit = (i == 0) ? -1 : mark[i - 1];
        for (int j = previousDigit + 1; j <= arr.length - k + i; j++) {
            mark[i] = j;
            if (i == k - 1) {
                sumTemp=0;
                for (int t = 0; t < k; t++) {
                    sumTemp+= arr[mark[t]];
                }
                if(sumTemp>=avg){
                    long diff = Math.abs(sum- sumTemp*2);
                    if(minDiff>diff)
                        minDiff=diff;
                }
            } else {
                attempt(i + 1);
            }
        }
    }

    static InputStream is = System.in;
    static byte[] inbuf = new byte[1 << 24];
    static int lenbuf = 0, ptrbuf = 0;

    static int readByte() {
        if (lenbuf == -1)
            throw new InputMismatchException();
        if (ptrbuf >= lenbuf) {
            ptrbuf = 0;
            try {
                lenbuf = is.read(inbuf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (lenbuf <= 0)
                return -1;
        }
        return inbuf[ptrbuf++];
    }

    static boolean isSpaceChar(int c) {
        return !(c >= 33 && c <= 126);
    }

    static int skip() {
        int b;
        while ((b = readByte()) != -1 && isSpaceChar(b))
            ;
        return b;
    }

    static double nd() {
        return Double.parseDouble(ns());
    }

    static char nc() {
        return (char) skip();
    }

    static String ns() {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while (!(isSpaceChar(b))) {
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }

    static char[] ns(int n) {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while (p < n && !(isSpaceChar(b))) {
            buf[p++] = (char) b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }

    static int ni() {
        int num = 0, b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }

    static long nl() {
        long num = 0;
        int b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }

}
