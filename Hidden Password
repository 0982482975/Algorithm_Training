import java.io.*;
import java.util.*;
import java.util.stream.Stream;

public class Main {

    public static class FastIO {
        InputStream dis;
        byte[] buffer = new byte[1 << 17];
        int pointer = 0;

        public FastIO(String fileName) throws Exception {
            dis = new FileInputStream(fileName);
        }

        public FastIO(InputStream is) {
            dis = is;
        }

        int nextInt() throws Exception {
            int ret = 0;
            byte b;
            do {
                b = nextByte();
            } while (b <= ' ');
            boolean negative = false;
            if (b == '-') {
                negative = true;
                b = nextByte();
            }
            while (b >= '0' && b <= '9') {
                ret = 10 * ret + b - '0';
                b = nextByte();
            }
            return (negative) ? -ret : ret;
        }

        long nextLong() throws Exception {
            long ret = 0;
            byte b;
            do {
                b = nextByte();
            } while (b <= ' ');
            boolean negative = false;
            if (b == '-') {
                negative = true;
                b = nextByte();
            }
            while (b >= '0' && b <= '9') {
                ret = 10 * ret + b - '0';
                b = nextByte();
            }
            return (negative) ? -ret : ret;
        }

        Integer[] readArray(int n) throws Exception {
            Integer[] a = new Integer[n];
            for (int i = 0; i < n; i++) a[i] = nextInt();
            return a;
        }

        byte nextByte() throws Exception {
            if (pointer == buffer.length) {
                dis.read(buffer, 0, buffer.length);
                pointer = 0;
            }
            return buffer[pointer++];
        }

        String next() throws Exception {
            StringBuilder ret = new StringBuilder();
            byte b;
            do {
                b = nextByte();
            } while (b <= ' ');
            while (b > ' ') {
                ret.appendCodePoint(b);
                b = nextByte();
            }
            return ret.toString();
        }

        public void close() throws Exception {
            if (dis == null) return;
            dis.close();
        }
    }

    static class Pos {
        boolean isChecked = false;
        int idx = 0;

        Pos(boolean isChecked, int idx) {
            this.isChecked = isChecked;
            this.idx = idx;
        }
    }

    public static void main(String[] args) throws Exception {
        FastIO scan = new FastIO(System.in);
        String pass1 = scan.next();
        String pass2 = scan.next();
        Map<Character, List<Pos>> map = new HashMap<>();
        char[] arr1 = pass1.toCharArray();
        char[] arr2 = pass2.toCharArray();

        for (int i = 0; i < arr2.length; i++) {
            if (map.containsKey(arr2[i])) {
                map.get(arr2[i]).add(new Pos(false, i));
            } else {
                List<Pos> l = new ArrayList<>();
                l.add(new Pos(false, i));
                map.put(arr2[i], l);
            }
        }
        boolean isFalse = false;
        int[] idxList = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            if (!map.containsKey(arr1[i])) {
                isFalse = true;
                break;
            }
            int idx = -1;
            int size = map.get(arr1[i]).size();
            for (int k = 0; k < size; k++) {
                if (!map.get(arr1[i]).get(k).isChecked) {
                    idx = map.get(arr1[i]).get(k).idx;
                    map.get(arr1[i]).get(k).isChecked = true;
                    break;
                }
            }
            if (idx == -1) {
                isFalse = true;
                break;
            }
            int j = i;
            if (i != 0)
                while (j >= 0) {
                    if (idx < idxList[j]) {
                        isFalse = true;
                        break;
                    }
                    j--;
                }
            if (isFalse)
                break;
            idxList[i] = idx;
        }
        System.out.println(isFalse ? "FAIL" : "PASS");

    }

}
