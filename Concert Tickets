import java.io.*;
import java.util.*;
 
class Main {
    public static void main(String[] args) throws IOException {
        int n = ni();
        int m = ni();
        TreeMap<Integer, Integer> h = new TreeMap<>();
        StringBuilder str= new StringBuilder();
        int[] t = new int[m];
        for (int i = 0; i < n; i++) {
            int v=ni();
            if (h.containsKey(v))
                h.replace(v, h.get(v) + 1);
            else
                h.put(v, 1);
        }
        for (int i = 0; i < m; i++) {
            Integer val = h.floorKey(ni());
            if (val != null) {
                if (h.get(val) > 0) {
                    str.append(val).append("\n");
                    if (h.get(val) - 1 <= 0)
                        h.remove(val);
                    else
                        h.replace(val, h.get(val) - 1);
 
                } else
                    str.append(-1 + "\n");
            } else {
                str.append(-1 + "\n");
            }
        }
        System.out.println(str);
    }
 
 
    static InputStream is = System.in;
    static byte[] inbuf = new byte[1 << 24];
    static int lenbuf = 0, ptrbuf = 0;
 
    static int readByte() {
        if (lenbuf == -1)
            throw new InputMismatchException();
        if (ptrbuf >= lenbuf) {
            ptrbuf = 0;
            try {
                lenbuf = is.read(inbuf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (lenbuf <= 0)
                return -1;
        }
        return inbuf[ptrbuf++];
    }
 
    static boolean isSpaceChar(int c) {
        return !(c >= 33 && c <= 126);
    }
 
    static int skip() {
        int b;
        while ((b = readByte()) != -1 && isSpaceChar(b))
            ;
        return b;
    }
 
    static double nd() {
        return Double.parseDouble(ns());
    }
 
    static char nc() {
        return (char) skip();
    }
 
    static String ns() {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while (!(isSpaceChar(b))) {
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
 
    static char[] ns(int n) {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while (p < n && !(isSpaceChar(b))) {
            buf[p++] = (char) b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
 
    static int ni() {
        int num = 0, b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
 
    static long nl() {
        long num = 0;
        int b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
}
