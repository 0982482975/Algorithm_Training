
import java.io.*;
import java.util.*;
class Custom {
    public String str;

    Custom(String str){
        this.str=str;
    }
    @Override
    public boolean equals(Object o) {
        return ((Custom) o).str.compareTo(this.str) == 0;
    }

    @Override
    public int hashCode() {
        return str.hashCode() * 31;
    }
}
class Main {
     public String s;
     public Set<Custom> set = new HashSet<>();
     public int[] markList;
    public void Try(int time, int idxMark) {
        if (time > s.length())
            return;
        for (int i = 0; i < s.length(); i++) {
            if (!isContain(markList,idxMark, i)) {
                markList[idxMark]=i;
                Try(time + 1, idxMark+1);
                if (time == s.length()) {
                   StringBuffer stringBuffer = new StringBuffer();
                    for(int j=0;j<=idxMark; j++)
                        stringBuffer.append(s.charAt(markList[j]));
                   set.add(new Custom(new String(stringBuffer)));

                }
            }

        }

    }

     public boolean isContain(int[] arr, int length, int value) {
        for(int i=0; i<length; i++)
            if(arr[i]==value)
                return true;
        return false;
    }

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));
        Main main = new Main();
        main.s = ns();
        main.markList = new int[main.s.length()];
        main.Try(1,0);
        bufferedWriter.write(main.set.size() + "\n");
        main.set.stream().sorted(Comparator.comparing(e -> e.str)).forEach(e -> {
            try {
                bufferedWriter.write(e.str + "\n");
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        });
        bufferedWriter.flush();
        bufferedWriter.close();

    }


    static InputStream is = System.in;
    static byte[] inbuf = new byte[1 << 24];
    static int lenbuf = 0, ptrbuf = 0;

    static int readByte() {
        if (lenbuf == -1)
            throw new InputMismatchException();
        if (ptrbuf >= lenbuf) {
            ptrbuf = 0;
            try {
                lenbuf = is.read(inbuf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (lenbuf <= 0)
                return -1;
        }
        return inbuf[ptrbuf++];
    }

    static boolean isSpaceChar(int c) {
        return !(c >= 33 && c <= 126);
    }

    static int skip() {
        int b;
        while ((b = readByte()) != -1 && isSpaceChar(b))
            ;
        return b;
    }

    static double nd() {
        return Double.parseDouble(ns());
    }

    static char nc() {
        return (char) skip();
    }

    static String ns() {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while (!(isSpaceChar(b))) {
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }

    static char[] ns(int n) {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while (p < n && !(isSpaceChar(b))) {
            buf[p++] = (char) b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }

    static int ni() {
        int num = 0, b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }

    static long nl() {
        long num = 0;
        int b;
        boolean minus = false;
        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
            ;
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        while (true) {
            if (b >= '0' && b <= '9') {
                num = num * 10 + (b - '0');
            } else {
                return minus ? -num : num;
            }
            b = readByte();
        }
    }

}
